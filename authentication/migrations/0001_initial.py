# Generated by Django 5.2.5 on 2025-09-12 14:50

import authentication.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("full_name", models.CharField(max_length=255)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            ("doctor", "Doctor"),
                            ("nurse", "Nurse"),
                            ("admin", "Administrator"),
                            ("receptionist", "Receptionist"),
                        ],
                        default="patient",
                        max_length=20,
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profile_pics/"),
                ),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("language", models.CharField(default="en", max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login_at", models.DateTimeField(blank=True, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="mediremind_users",
                        related_query_name="mediremind_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="mediremind_users",
                        related_query_name="mediremind_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user_role", models.CharField(max_length=30)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("read", "Read/View"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("export", "Data Export"),
                            ("print", "Print"),
                            ("share", "Share/Send"),
                            ("access", "Access"),
                            ("search", "Search"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("resource_type", models.CharField(db_index=True, max_length=50)),
                ("resource_id", models.CharField(db_index=True, max_length=255)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("description", models.TextField()),
                ("old_values", models.JSONField(blank=True, null=True)),
                ("new_values", models.JSONField(blank=True, null=True)),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        db_index=True,
                        default="low",
                        max_length=20,
                    ),
                ),
                ("session_id", models.CharField(blank=True, max_length=255)),
                ("request_id", models.CharField(blank=True, max_length=255)),
                (
                    "patient_affected",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to="accounts.enhancedpatient",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "audit_logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="DataAccessPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("resource_type", models.CharField(db_index=True, max_length=50)),
                ("allowed_roles", models.JSONField(default=list)),
                ("required_permissions", models.JSONField(default=list)),
                (
                    "time_restrictions",
                    models.JSONField(
                        default=dict, help_text="Business hours, days of week, etc."
                    ),
                ),
                (
                    "location_restrictions",
                    models.JSONField(
                        default=dict,
                        help_text="IP ranges, geographic restrictions, etc.",
                    ),
                ),
                ("requires_patient_relationship", models.BooleanField(default=True)),
                (
                    "allowed_relationship_types",
                    models.JSONField(
                        default=list,
                        help_text="Types of relationships allowed (primary_care, consulting, etc.)",
                    ),
                ),
                ("requires_justification", models.BooleanField(default=False)),
                ("requires_supervisor_approval", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_policies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Data Access Policies",
                "db_table": "data_access_policies",
            },
        ),
        migrations.CreateModel(
            name="LoginAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email_attempted", models.CharField(db_index=True, max_length=255)),
                ("ip_address", models.GenericIPAddressField(db_index=True)),
                ("user_agent", models.TextField()),
                ("success", models.BooleanField(db_index=True)),
                ("failure_reason", models.CharField(blank=True, max_length=100)),
                ("mfa_required", models.BooleanField(default=False)),
                ("mfa_success", models.BooleanField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("session_id", models.CharField(blank=True, max_length=255)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "auth_login_attempts",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="MFADevice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("totp", "Time-based OTP (Authenticator App)"),
                            ("sms", "SMS Verification"),
                            ("email", "Email Verification"),
                            ("hardware", "Hardware Token"),
                            ("backup", "Backup Codes"),
                        ],
                        max_length=20,
                    ),
                ),
                ("device_name", models.CharField(max_length=100)),
                (
                    "secret_key",
                    authentication.models.EncryptedCharField(
                        blank=True, max_length=255
                    ),
                ),
                (
                    "phone_number",
                    authentication.models.EncryptedCharField(
                        blank=True, max_length=255
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_backup", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("use_count", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "auth_mfa_devices",
            },
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "codename",
                    models.CharField(db_index=True, max_length=50, unique=True),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("patient_data", "Patient Data"),
                            ("medical_records", "Medical Records"),
                            ("appointments", "Appointments"),
                            ("billing", "Billing"),
                            ("reports", "Reports"),
                            ("system", "System Administration"),
                            ("staff_management", "Staff Management"),
                            ("notifications", "Notifications"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "is_sensitive",
                    models.BooleanField(
                        default=False, help_text="Requires additional verification"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "auth_permissions",
                "ordering": ["category", "name"],
                "indexes": [
                    models.Index(
                        fields=["codename"], name="auth_permis_codenam_c87527_idx"
                    ),
                    models.Index(
                        fields=["category"], name="auth_permis_categor_13eb21_idx"
                    ),
                    models.Index(
                        fields=["is_sensitive"], name="auth_permis_is_sens_5f2153_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RolePermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            ("patient_guardian", "Patient Guardian"),
                            ("physician", "Physician"),
                            ("nurse", "Nurse"),
                            ("nurse_practitioner", "Nurse Practitioner"),
                            ("physician_assistant", "Physician Assistant"),
                            ("therapist", "Therapist"),
                            ("technician", "Medical Technician"),
                            ("receptionist", "Receptionist"),
                            ("billing_specialist", "Billing Specialist"),
                            ("medical_records_clerk", "Medical Records Clerk"),
                            ("practice_manager", "Practice Manager"),
                            ("system_admin", "System Administrator"),
                            ("security_officer", "Security Officer"),
                            ("compliance_officer", "Compliance Officer"),
                        ],
                        db_index=True,
                        max_length=30,
                    ),
                ),
                ("is_default", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="authentication.permission",
                    ),
                ),
            ],
            options={
                "db_table": "auth_role_permissions",
            },
        ),
        migrations.CreateModel(
            name="SecurityAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("failed_login", "Failed Login Attempts"),
                            ("account_lockout", "Account Lockout"),
                            ("suspicious_access", "Suspicious Access Pattern"),
                            ("data_breach", "Potential Data Breach"),
                            ("unauthorized_access", "Unauthorized Access Attempt"),
                            ("privilege_escalation", "Privilege Escalation"),
                            ("unusual_activity", "Unusual User Activity"),
                        ],
                        db_index=True,
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Informational"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("investigating", "Under Investigation"),
                            ("resolved", "Resolved"),
                            ("false_positive", "False Positive"),
                        ],
                        db_index=True,
                        default="open",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("detected_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("metadata", models.JSONField(default=dict)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_affected",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "security_alerts",
                "ordering": ["-detected_at"],
            },
        ),
        migrations.CreateModel(
            name="UserPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "granted",
                    models.BooleanField(
                        default=True, help_text="True=granted, False=revoked"
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("justification", models.TextField(blank=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="authentication.permission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "auth_user_permissions",
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_key",
                    models.CharField(db_index=True, max_length=255, unique=True),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("device_fingerprint", models.CharField(blank=True, max_length=255)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("requires_reauth", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True, db_index=True)),
                ("expires_at", models.DateTimeField(db_index=True)),
                ("terminated_at", models.DateTimeField(blank=True, null=True)),
                ("termination_reason", models.CharField(blank=True, max_length=100)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "auth_user_sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["role"], name="users_role_0ace22_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["created_at"], name="users_created_6541e9_idx"),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["user", "timestamp"], name="audit_logs_user_id_88267f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["action", "timestamp"], name="audit_logs_action_474804_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["resource_type", "resource_id"],
                name="audit_logs_resourc_bda8a6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["patient_affected", "timestamp"],
                name="audit_logs_patient_1b3aac_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["risk_level", "timestamp"], name="audit_logs_risk_le_ab1389_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["timestamp"], name="audit_logs_timesta_423be6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataaccesspolicy",
            index=models.Index(
                fields=["resource_type"], name="data_access_resourc_b33c57_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataaccesspolicy",
            index=models.Index(
                fields=["is_active"], name="data_access_is_acti_66f7aa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="loginattempt",
            index=models.Index(
                fields=["user", "timestamp"], name="auth_login__user_id_6385c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="loginattempt",
            index=models.Index(
                fields=["ip_address", "timestamp"],
                name="auth_login__ip_addr_fe98a7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="loginattempt",
            index=models.Index(
                fields=["success", "timestamp"], name="auth_login__success_f9a33b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="loginattempt",
            index=models.Index(
                fields=["email_attempted", "timestamp"],
                name="auth_login__email_a_57394d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="mfadevice",
            index=models.Index(fields=["user"], name="auth_mfa_de_user_id_31e079_idx"),
        ),
        migrations.AddIndex(
            model_name="mfadevice",
            index=models.Index(
                fields=["device_type"], name="auth_mfa_de_device__2d9240_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="mfadevice",
            index=models.Index(
                fields=["is_active"], name="auth_mfa_de_is_acti_6ad5e9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(fields=["role"], name="auth_role_p_role_f97439_idx"),
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["is_default"], name="auth_role_p_is_defa_a18542_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rolepermission",
            unique_together={("role", "permission")},
        ),
        migrations.AddIndex(
            model_name="securityalert",
            index=models.Index(
                fields=["alert_type", "detected_at"],
                name="security_al_alert_t_6e0cd4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="securityalert",
            index=models.Index(
                fields=["severity", "status"], name="security_al_severit_1c570c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="securityalert",
            index=models.Index(
                fields=["user_affected", "detected_at"],
                name="security_al_user_af_4c1b43_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userpermission",
            index=models.Index(fields=["user"], name="auth_user_p_user_id_760bb9_idx"),
        ),
        migrations.AddIndex(
            model_name="userpermission",
            index=models.Index(
                fields=["granted"], name="auth_user_p_granted_0edb91_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userpermission",
            index=models.Index(
                fields=["expires_at"], name="auth_user_p_expires_316e57_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userpermission",
            unique_together={("user", "permission")},
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["user", "is_active"], name="auth_user_s_user_id_e0ab05_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["expires_at"], name="auth_user_s_expires_3df8ae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["last_activity"], name="auth_user_s_last_ac_33d8b9_idx"
            ),
        ),
    ]
