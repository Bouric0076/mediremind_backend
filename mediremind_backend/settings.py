"""
Django settings for mediremind_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-your-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# ALLOWED_HOSTS configuration for Render
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']

# Add Render hostname if available
if 'RENDER_EXTERNAL_HOSTNAME' in os.environ:
    ALLOWED_HOSTS.append(os.environ['RENDER_EXTERNAL_HOSTNAME'])

# Custom User Model
AUTH_USER_MODEL = 'authentication.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',  # Add token authentication
    'webpush',  # Re-enabled - pywebpush is compatible with Python 3.13
    'corsheaders',

    # Local apps
    'accounts',  # Centralized user management
    'authentication',  # Enhanced authentication system
    'appointments',
    'notifications',
    'medical_records',
    'billing',
    'prescriptions',
    'analytics',  # Analytics and dashboard system
    'calendar_integrations',  # Calendar integration system
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be first for CORS to work properly
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'authentication.middleware.AuthenticationMiddleware',  # Custom optimized authentication
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mediremind_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mediremind_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Use DATABASE_URL for Render deployment, fallback to individual env vars for local development
DATABASES = {
    'default': dj_database_url.config(
        default=f"postgresql://{os.getenv('DB_USER', 'postgres')}:{os.getenv('DB_PASSWORD', '')}@{os.getenv('DB_HOST', 'localhost')}:{os.getenv('DB_PORT', '5432')}/{os.getenv('DB_NAME', 'postgres')}?sslmode=require",
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# Authentication settings
LOGIN_URL = '/auth/login/'
MAX_LOGIN_ATTEMPTS = 5
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_PREFLIGHT_MAX_AGE = 86400

# Production CORS configuration
if DEBUG:
    # Development settings - allow all origins for easier development
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://localhost:5173",
        "http://localhost:8080",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:5173",
        "http://127.0.0.1:8080",
    ]
else:
    # Production settings - strict origin control
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = [
        "https://mediremind-frontend.onrender.com",
        "https://mediremind-backend-cl6r.onrender.com",
    ]
    
    # Add FRONTEND_URL from environment if available
    if 'FRONTEND_URL' in os.environ:
        frontend_url = os.environ['FRONTEND_URL']
        if not frontend_url.startswith(('http://', 'https://')):
            frontend_url = f"https://{frontend_url}"
        CORS_ALLOWED_ORIGINS.append(frontend_url)

# Headers that are allowed during the actual request
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Methods that are allowed during the actual request
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Security Headers for Production
# These settings enhance security by adding proper HTTP security headers
SECURE_SSL_REDIRECT = not DEBUG  # Redirect HTTP to HTTPS in production
SECURE_HSTS_SECONDS = 31536000  # 1 year - HTTP Strict Transport Security
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to all subdomains
SECURE_HSTS_PRELOAD = True  # Allow site to be submitted to browser preload list
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing
SECURE_BROWSER_XSS_FILTER = True  # Enable XSS filtering in browsers
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking attacks
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'  # Control referrer information

# Session and CSRF Cookie Security (consolidated settings)
# These are now handled in the main session/CSRF settings section below

# CSRF settings
# Helper function to ensure URLs have proper schemes
def ensure_url_scheme(url, default_scheme='https'):
    """Ensure URL has a proper scheme, add default if missing"""
    if not url:
        return url
    if not url.startswith(('http://', 'https://')):
        return f"{default_scheme}://{url}"
    return url

# Get environment variables and ensure they have proper schemes
frontend_url = ensure_url_scheme(os.getenv('FRONTEND_URL', 'http://localhost:3000'))
vite_dev_url = ensure_url_scheme(os.getenv('VITE_DEV_URL', 'http://localhost:5173'))
flutter_web_url = ensure_url_scheme(os.getenv('FLUTTER_WEB_URL', 'http://localhost:8080'))

CSRF_TRUSTED_ORIGINS = [
    frontend_url,
    vite_dev_url,
    flutter_web_url,
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:8080",
    "https://mediremind-frontend.onrender.com",  # Production frontend URL
    "https://mediremind-backend-cl6r.onrender.com",  # Backend service URL from error
]

# Session settings for cross-origin requests
SESSION_COOKIE_SAMESITE = 'Lax'  # Standard setting for development
SESSION_COOKIE_SECURE = not DEBUG  # Use secure cookies in production
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookies
SESSION_COOKIE_AGE = 28800  # 8 hours
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_DOMAIN = None  # Default domain setting

# CSRF settings for cross-origin
CSRF_COOKIE_SAMESITE = 'Lax'  # Standard setting for development
CSRF_COOKIE_SECURE = not DEBUG  # Use secure CSRF cookies in production
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access for CSRF token

# Web Push settings
WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": os.getenv("VAPID_PUBLIC_KEY", ""),
    "VAPID_PRIVATE_KEY": os.getenv("VAPID_PRIVATE_KEY", ""),
    "VAPID_ADMIN_EMAIL": os.getenv("VAPID_ADMIN_EMAIL", "admin@mediremind.com")
}

# Validate VAPID settings
if not all([WEBPUSH_SETTINGS["VAPID_PUBLIC_KEY"], WEBPUSH_SETTINGS["VAPID_PRIVATE_KEY"]]):
    print("Warning: VAPID keys not properly configured. Web push notifications will not work.")
    print("Generate VAPID keys using: python notifications/generate_vapid_keys.py")

# Email settings
if DEBUG:
    # In development mode, print emails to console
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("Development mode: Emails will be printed to console")
else:
    # In production mode, use SMTP
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = True
    EMAIL_USE_SSL = False  # Don't use SSL when using TLS
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    EMAIL_TIMEOUT = 10  # Add timeout setting
    
    # Validate email settings
    if not all([EMAIL_HOST_USER, EMAIL_HOST_PASSWORD]):
        print("Warning: Email settings not properly configured. Email notifications will not work.")

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@mediremind.com')

# Frontend URL setting for email templates
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:5173')

# Beem SMS Settings
BEEM_API_KEY = os.getenv('BEEM_API_KEY')
BEEM_SECRET_KEY = os.getenv('BEEM_SECRET_KEY')
BEEM_SENDER_ID = os.getenv('BEEM_SENDER_ID', 'MediRemind')
BEEM_WHATSAPP_NAMESPACE = os.getenv('BEEM_WHATSAPP_NAMESPACE')

# Field-level encryption configuration
# SECURITY WARNING: Use a secure, randomly generated key in production
# This key should be stored securely and never committed to version control
FIELD_ENCRYPTION_KEY = os.getenv('FIELD_ENCRYPTION_KEY', 'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
    },
    'loggers': {
        'accounts': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

